// 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
// 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
// 请你计算并返回达到楼梯顶部的最低花费。
// 示例 1：
//
// 输入：cost = [10, 15, 20]
// 输出：15
//
// 示例 2：
//
// 输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
// 输出：6

function fn(cost) {
    // dp[i] 代表到达i层需要花费的费用
    // 初始化dp[0] = 0,dp[1] = 0,选择从下标为 0 或下标为 1 的台阶开始爬楼梯 ，所以不需要费用
    const dp = [0, 0]
    // 遍历顺序，从左到右
    for(let i = 2; i <= cost.length; i ++){
        // 递推公式：Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])
        dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])
    }
    return dp[dp.length - 1]
}

console.log(fn([10, 15, 20]))
console.log(fn([1, 100, 1, 1, 1, 100, 1, 1, 100, 1]))
